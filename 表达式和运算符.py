# 表达式是由一个或多个操作数及零个或运算符组成的序列，其计算结果为一个值、对象、方法或命名空间。
# 表达式可以包含文本值、方法调用、运算符以及其操作数、或简单名称。简单名称可以是变量名、类型成员
# 名、方法参数名、命名空间或类型名。
# 表达式可以使用运算符（运算符又可以使用其他表达式作为参数）或方法调用（方法调用的参数又可以是其他
# 方法参数），因此表达式可以很简单，也可以非常复杂
# 运算符类型有算数运算符、关系运算符、赋值运算符、逻辑运算符和条件运算符。
# 按照运算需要的操作数目，可以分为一元，二元，三元运算符：
# 一元：就是只需要一个操作数。例：+，-
# 二元：需要两个操作数。大多数都是二元。
# 三元：需要三个操作数，条件运算是三元运算符。例：b if a else c

# 1. 算术运算符是一个二元运算符：只要有任意一个操作数是浮点数，结果就会是浮点数
# +        -         *         /
# //       整除、  **       乘方(幂)、%        取模(取余)
# 2. 关系运算符 ：用于比较两个表达式的值
# == 、 != 、 >  、 < 、 >= 、 <=
# 3. 赋值运算符
# =     +=      -=       *=      /=        %=        **=       //=
# 序列赋值
x, y, z = '1', '2', '3'    # 右边是元组的一种写法，x=1,y=2,c=3
x, y, z    # ('1', '2', '3')
x, y, z = '123'
x, y, z     # ('1', '2', '3')
# x, y, z = '1234'     # 报错，参数太多
# x, y, z = '1', '2', '3', '4'   # 报错，参数太多
# 4. 逻辑运算符
# 对于逻辑 “与”，“或”，“非”，我们使用and，or，not这几个关键字。
# 逻辑运算符and和or也称作短路运算符：它们的参数从左向右解析，一旦结果可以确定就停止。例如，如果A和C为真
# 而B为假，A and B and C不会解析C。在作用于一个普通的非逻辑值时，短路运算符的返回值通常是能够最先确定结
# 果的那个操作数。
# 关系运算可以通过逻辑运算符and和or组合，比较的结果可以用not来取反意。逻辑运算符的优先级又低于关系运算
# 符，在它们之中，not具有最高的优先级，or优先级最低，所以 A and not B or C 等于 (A and (not B)) or C 。
5 and 4    # 4
0 and 4    # 0
False or 3 or 0    # 3
2 > 1 and not 3 > 5 or 4    # True
not 3 > 5      # True
# 运算符优先级由高到低：索引运算符 X[index] -> 幂运算(**) -> 正负号(+ 或 -)
# -> 算术操作符 (*  /  //  +  -) -> 比较运算符 (==  !=  >  <  >=  <= )  -> 逻辑运算符 ( and   or  not )    