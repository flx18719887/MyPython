# # 方法一：format_string % obj
# print('%s的编号是%d' %('张三', 101))  # 张三的编号是101
# print('%s的年龄是%d' % ('张三', 20))  # 张三的年龄是20
# print('%s的月收入是%f' % ('张三', 12345.6))  # 张三的月收入是12345.600000
# # 方法二：str.format() 普通形式
# '{0}的年龄是{1}'.format('张三', 20)   # '张三的年龄是20'
# '{0}的编号是{1}, 月收入是{2}'.format('张三', 101, 12345.6) # '张三的编号是101, 月收入是12345.6'
# '{0}就是一个大城市{1}, {0}房价很贵, {0}是一个古城'.format('北京', "的代表") # '北京就是一个大城市的代表, 北京放价很贵, 北京是一个古城'
# # 方法三：str.format() 接受参数形式
# '{name}的年龄是{age}'.format(age = 20, name = '张三')  # '张三的年龄是20'
# '{name}的编号是{num}, 月收入是{income}'.format(num = 101, name = '张三', income = 12345.8)   # '张三的编号是101, 月收入是12345.8'
# '{城市}就是一个大城市{描述}, {城市}房价很贵, {城市}是一个古城'.format(城市 = '北京', 描述 = '的代表') # '北京就是一个大城市的代表, 北京房价很贵, 北京是一个古城'
# 姓名 = '李先生'
# 节日名称 = '五一快乐！'
# print('''亲爱的{填写姓名}:
#         您好, 祝您{填写节日名称}！'''.format(填写姓名 = 姓名, 填写节日名称 = 节日名称))




# 填充常跟对齐一起使用，^<>分别是居中、左对齐、右对齐，后面带宽度
# :号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充
'{:^8}'.format('2333')    #    居中   '  2333  '
'{:<8}'.format('2333')    #    左对齐  '2333    '
'{:>8}'.format('2333')    #    右对齐  '    2333'
'Python{:-<10}'.format('666')   # 指定填充字符  'Python666-------'
'Python{:*^10}'.format('6666')   # 'Python***6666***'
'Python{:*>10}'.format('6666')   # 'Python******6666'
'Python{:*<10}'.format('6666')   # 'Python6666******'
'{:.2f}'.format(3.141926)   # 保留两位有效数字      '3.14'
'{:,}'.format(123467890)   # 金额的千位分隔符   '123,467,890'





# s = "我是{name}, 我的年龄是{age}, 我的性别是{sex}"
# m_dict = {"name":"flx", "age":18, "sex":"male"}
# # **是解包操作（将字典作为格式化输出的参数）
# s = s.format(**m_dict)
# print(s)






